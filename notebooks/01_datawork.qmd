---
title: "01_datawork"
author: "Munkhtsetseg"
---


Library

```{r echo=FALSE}
library(tidyverse)
library(ggplot2)
```

# Import the dataset and remove the duplicates

Import the dataset from the directory of: ~/Data Input/Preprocessing data/Preprocessing data.csv, assign the dataset as object of df:

```{r}
df <- read.csv("~/Data Input/Preprocessing data/Preprocessing data.csv")
```

Remove the duplicates with the function of distinct(), assign the dataset as df_01:

```{r}
df_00 <- df |>
  distinct()
```

## Produce a table with missing data

```{r}
df_000 <- df_00 |>
   filter(Year<2019 & Year >2008)



df_01 <- df_000 |>
   select(Year, Month, Day, Hour, PM2, PM10, Visibility, WD, WS,   OPC, Station.name, Date) |>
  rowwise() |>
filter((Year != 2019 & Station.name == "Zamynuud") | 
       (Year < 2016 & Station.name == "Sainshand") |
       (Year < 2021 & Station.name == "UB") |
       (Year < 2017 & Station.name == "Dalanzadgad")
       )

```

For date options as year, month, etc:

```{r}
Table_NA_by_Year <- df_01 |>
  group_by(Station.name,Year) |> 
  summarise(NA_date = sum(!is.na(Date)),
            NA_PM2 = sum(is.na(PM2)),
            NA_PM10 = sum(is.na(PM10)),
            NA_Vis = sum(is.na(Visibility)),
            NA_WD = sum(is.na(WD)),
            NA_WS = sum(is.na(WS)),
            NA_OPC = sum(is.na(OPC))
            ) 
Table_NA_by_Year

```

For station
```{r}
Table_NA_by_Station <- df_01 |>
  group_by(Station.name) |> 
  summarise(NA_date = sum(!is.na(Date)),
            NA_PM2 = sum(is.na(PM2)),
            NA_PM10 = sum(is.na(PM10)),
            NA_Vis = sum(is.na(Visibility)),
            NA_WD = sum(is.na(WD)),
            NA_WS = sum(is.na(WS)),
            NA_OPC = sum(is.na(OPC))
  ) 
Table_NA_by_Station
```

By percentages
```{r df_01, echo=FALSE}
Table_NA_by_Station_percentage <- df_01 |>
  group_by(Station.name, Year) |> 
  summarise(NA_date = sum(!is.na(Date)),
            NA_PM2 = sum(is.na(PM2)),
            NA_PM10 = sum(is.na(PM10)),
            NA_Vis = sum(is.na(Visibility)),
            NA_WD = sum(is.na(WD)),
            NA_WS = sum(is.na(WS)),
            NA_OPC = sum(is.na(OPC))
  ) |> 
  mutate(
            NA_PM2p = if_else(NA_date != NA_PM2, NA_PM2/NA_date*100, 0)
  ) |>
  do({
    PM10_perc <- .$NA_PM2*100/.$NA_date; 
      missing_PM10 <-mean(PM10_perc); 
      attr(missing_PM10, "data.all") <- PM10_perc; 
    PM2_perc <- .$NA_PM10*100/.$NA_date; 
      missing_PM2 <- mean(PM2_perc); 
      attr(missing_PM2, "data.all") <- PM2_perc;
    Vis_perc <- .$NA_Vis*100/.$NA_date; 
      missing_Vis <- mean(Vis_perc); 
      attr(missing_Vis, "data.all") <- Vis_perc; 
    WS_perc <- .$NA_WS*100/.$NA_date; 
      missing_WS <- mean(WS_perc); 
      attr(missing_WS, "data.all") <- WS_perc; 
    WD_perc <- .$NA_WD*100/.$NA_date; 
      missing_WD <- mean(WD_perc); 
      attr(missing_WD, "data.all") <- WD_perc; 
  data.frame(missing_PM2, missing_PM10, missing_Vis, missing_WS, missing_WD)}) 
 Table_NA_by_Station_percentage
```

# Note that:
We use the data in the period of 2009-2018, which has been regarded as a monitoring work stabilized since 2008 when is the beginning of the monitoring. According to NIES, site maintenance was consistent up to 2018. 
- Sainshand site, data 2009-2015 get used; 
- Dalanzad site: 2009-2016.
- UB: 2009-2018
- Zamyn uud: 2009-2018


# Remove the spikes, and produce an extended table
Remove the spikes in the datasets, and produce the table with NA, with removed spikes; express it in a percentages.
### Remove the spikes
Method 1. Mean value +- (3-5)SD
- Find Monthly mean
```{r}
df_02 <- df_01 |>
  filter(Station.name=="UB" ) |>
  drop_na(PM2, PM10) |>
    dplyr::mutate_at(vars(PM2, PM10), 
                   ~ ifelse(near(., mean(.), sd(.) * 3), ., "Outlier")) |>
  dplyr::filter_if(is.character, any_vars(. == "Outlier"))
df_02
```


```{r}
df_02 <- df_01 |>
  drop_na(PM2, PM10) |>
    dplyr::mutate_at(vars(PM2, PM10), 
                   ~ ifelse(near(., mean(., .by = c(Station.name, Month)), sd(.) * 3), ., "Outlier")) |>
  dplyr::filter_if(is.character, any_vars(. == "Outlier"))
df_02
```

## Save dataset in folder: 01_data_raw
```{r}

```

# Tidy data
## Fill the missing data
Method 1. Fill the gap
Method 2. Relationship equation
Method 3. Look-up table

## Save dataset in folder: 02_data_tidy
```{r}

```
